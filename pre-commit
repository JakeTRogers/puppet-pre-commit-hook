#!/bin/bash
# pre-commit git hook to check the validity of a puppet manifest
#
# Prerequisites:
#   gem install puppet-lint puppet
#
# Install:
#  /path/to/repo/.git/hooks/pre-commit
#
# Original:
#  blog: http://techblog.roethof.net/puppet/a-puppet-git-pre-commit-hook-is-always-easy-to-have/
#
# Authors:
#  Ronny Roethof
#  Mattias Geniar <m@ttias.be>
#  Rob Nelson <rnelson0@gmail.com>

function use_bundle() {
  path_to_bundle=$(command -v bundle)
  if [ -x "$path_to_bundle" -a -d ".bundle" ] ; then
    return 0
  else
    return 1
  fi
}

function setup_paths() {
  # Make sure the necessary tools are installed. If they aren't, just die and
  # stop the commit. Force the use of these tools before a commit is allowed.
  # No commit should ever happen without a puppet-lint check.

  path_to_puppet=$(command -v puppet)
  if ! [ -x "$path_to_puppet" ] ; then
     echo "The puppet binary wasn't found. Sorry, I won't allow you to commit without puppet installed."
     echo "Please install puppet and try again."
     exit 1
  fi

  path_to_puppet_lint=$(command -v puppet-lint)
  if ! [ -x "$path_to_puppet_lint" ] ; then
     echo "The puppet-lint binary wasn't found. Sorry, I won't allow you to commit without puppet-lint installed."
     echo "Please install puppet-lint and try again."
     exit 1
  fi

  path_to_erb=$(command -v erb)
  if ! [ -x "$path_to_erb" ] ; then
     echo "The erb binary wasn't found. Sorry, I won't allow you to commit without erb installed."
     echo "Please install erb (Ruby Templating) and try again."
     exit 1
  fi

  path_to_ruby=$(command -v ruby)
  if ! [ -x "$path_to_ruby" ] ; then
     echo "The ruby binary wasn't found. Sorry, I won't allow you to commit without ruby installed."
     echo "Please install ruby and try again."
     exit 1
  fi

  if use_bundle ; then
    path_to_puppet="${path_to_bundle} exec puppet"
    path_to_puppet_lint="${path_to_bundle} exec puppet-lint"
    path_to_erb="${path_to_bundle} exec erb"
    path_to_ruby="${path_to_bundle} exec ruby"
  fi
}

function checkyaml() {
  $path_to_ruby -e "require 'yaml'; YAML.load_file('$1')"
}

setup_paths

echo "### Checking puppet syntax, for science! ###"
# for file in `git diff --name-only --cached | grep -E '\.(pp|erb)'`
for file in `git diff --name-only --cached | grep -E '\.(pp)'`
do
    # Only check new/modified files that end in *.pp extension
    if [[ -f $file && $file == *.pp ]]
    then
        $path_to_puppet_lint \
            --no-80chars-check \
            --no-autoloader_layout-check \
            --no-nested_classes_or_defines-check \
            --no-class_inherits_from_params_class-check \
            --with-filename $file

        # Set us up to bail if we receive any syntax errors
        if [[ $? -ne 0 ]]
        then
            syntax_is_bad=1
        else
            echo "$file looks good"
        fi
    fi
done
echo ""

echo "### Checking if puppet manifests are valid ###"
# validating the whole manifest takes too long. uncomment this
# if you want to test the whole shebang.
# for file in `find . -name "*.pp"`
# for file in `git diff --name-only --cached | grep -E '\.(pp|erb)'`
for file in `git diff --name-only --cached | grep -E '\.(pp)'`
do
    if [[ -f $file && $file == *.pp ]]
    then
        $path_to_puppet parser validate $file
        if [[ $? -ne 0 ]]
        then
            echo "ERROR: puppet parser failed at: $file"
            syntax_is_bad=1
        else
            echo "OK: $file looks valid"
        fi
    fi
done
echo ""

if [[ -f manifests/site.pp ]]
then
  echo "### Checking if the catalog compiles"
  $path_to_puppet apply --noop manifests/site.pp
  if [[ $? -ne 0 ]]
  then
      echo "ERROR: puppet catalog compilation failed"
      syntax_is_bad=1
  else
      echo "OK: $file looks valid"
  fi
fi

echo "### Checking if ruby template syntax is valid ###"
for file in `git diff --name-only --cached | grep -E '\.(erb)'`
do
    if [[ -f $file ]]
    then
        $path_to_erb -P -x -T '-' $file | ruby -c
        if [[ $? -ne 0 ]]
        then
            echo "ERROR: ruby template parser failed at: $file"
            syntax_is_bad=1
        else
            echo "OK: $file looks like a valid ruby template"
        fi
    fi
done
echo ""

echo "### Checking if YAML syntax is valid ###"
for file in `git diff --name-only --cached | grep -E '\.(yaml)'`
do
    if [[ -f $file ]]
    then
        checkyaml $file
        if [[ $? -ne 0 ]]
        then
            echo "ERROR: YAML syntax validation failed at: $file"
            syntax_is_bad=1
        else
            echo "OK: $file looks like a valid YAML file"
        fi
    fi
done
echo ""

if [[ $syntax_is_bad -eq 1 ]]
then
    echo "FATAL: Syntax is bad. See above errors"
    echo "Bailing"
    exit 1
else
    echo "Everything looks good."
fi
